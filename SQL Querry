/* 1.	Create a database named employee, then import data_science_team.csv proj_table.csv
and emp_record_table.csv into the employee database from the given resources.*/
CREATE database employee;
USE employee;

/*2.	Create an ER diagram for the given employee database.

proj_table: This table holds information about projects.
PROJECT_ID: The primary key for the projects.

emp_record_table: This table holds information about employees.
EMP_ID: The primary key for the employees.
PROJ_ID: Foreign key referencing PROJECT_ID in proj_table.

data_science_team: This table is a subset of the emp_record_table and holds information specifically about the data science team.
EMP_ID: The primary key, which also serves as a foreign key referencing EMP_ID in emp_record_table.*/


/*3.	Write a query to fetch EMP_ID, FIRST_NAME, LAST_NAME, GENDER, and DEPARTMENT 
from the employee record table, and make a list of employees and details of their department.*/

select EMP_ID, FIRST_NAME, LAST_NAME, GENDER, DEPT
FROM emp_record_table;


/*4.	Write a query to fetch EMP_ID, FIRST_NAME, LAST_NAME, GENDER, DEPARTMENT, and EMP_RATING if the EMP_RATING is: 
●	less than two
●	greater than four 
●	between two and four*/
-- less than two
select EMP_ID, FIRST_NAME, LAST_NAME, GENDER, DEPT, EMP_RATING
from emp_record_table
where EMP_RATING < 2 ;

--  greater than four 
select EMP_ID, FIRST_NAME, LAST_NAME, GENDER, DEPT, EMP_RATING
from emp_record_table
where EMP_RATING > 4 ;

-- between two and four
select EMP_ID, FIRST_NAME, LAST_NAME, GENDER, DEPT, EMP_RATING
from emp_record_table
where EMP_RATING between 2 and 4 ;

/*5.	Write a query to concatenate the FIRST_NAME and the LAST_NAME of employees in the 
Finance department from the employee table and then give the resultant column alias as NAME.*/

Select concat(FIRST_NAME,'',LAST_NAME) as NAME
from emp_record_table
Where  DEPT='Finance';
use employee ;

/*6.	Write a query to list only those employees who have someone reporting to them. Also, show the number of reporters (including the President).*/

Select e1.EMP_ID, e1.FIRST_NAME, e1.LAST_NAME, e1.ROLE, e1.DEPT, count(e2.EMP_ID) as Number_of_Reporters 
from emp_record_table e1
join emp_record_table e2 on e1.EMP_ID = e2.MANAGER_ID
group by e1.EMP_ID, e1.FIRST_NAME, e1.LAST_NAME, e1.ROLE, e1.DEPT ;



/*7.	Write a query to list down all the employees from the healthcare and finance departments using union. Take data from the employee record table.*/


select EMP_ID, FIRST_NAME, LAST_NAME, GENDER, ROLE, DEPT, EXP, COUNTRY, CONTINENT, SALARY, EMP_RATING, MANAGER_ID, PROJ_ID
from emp_record_table
where Dept = 'Healthcare'

union

select EMP_ID, FIRST_NAME, LAST_NAME, GENDER, ROLE, DEPT, EXP, COUNTRY, CONTINENT, SALARY, EMP_RATING, MANAGER_ID, PROJ_ID
from emp_record_table
where Dept = 'Finance' ;


/*8.	Write a query to list down employee details such as EMP_ID, FIRST_NAME, LAST_NAME, ROLE, DEPARTMENT, and EMP_RATING
grouped by dept. Also include the respective employee rating along with the max emp rating for the department.*/

select e.EMP_ID, e.FIRST_NAME, e.LAST_NAME, e.ROLE, e.DEPT, e.EMP_RATING,
(SELECT MAX(EMP_RATING) FROM emp_record_table WHERE DEPT = e.DEPT) AS MAX_EMP_RATING
FROM emp_record_table e
ORDER BY e.DEPT;


/*9.	Write a query to calculate the minimum and the maximum salary of the employees in each role. Take data from the employee record table.*/


SELECT ROLE, MIN(SALARY) AS MIN_SALARY, 
MAX(SALARY) AS MAX_SALARY
FROM emp_record_table
GROUP BY ROLE ;


/*10.	Write a query to assign ranks to each employee based on their experience. Take data from the employee record table.*/

SELECT EMP_ID, FIRST_NAME, LAST_NAME, ROLE, DEPT, EXP, 
rank() OVER (ORDER BY EXP DESC) AS Experience_Rank
FROM emp_record_table
ORDER BY Experience_Rank ;


/*11.	Write a query to create a view that displays employees in various countries whose salary is more than six thousand. Take data from the employee record table.*/

SELECT EMP_ID, FIRST_NAME, LAST_NAME, ROLE, DEPT, COUNTRY, SALARY
from emp_record_table
where salary > 6000 ; 


/* 12.	Write a nested query to find employees with experience of more than ten years. Take data from the employee record table.*/

SELECT EMP_ID, FIRST_NAME, LAST_NAME, ROLE, DEPT, COUNTRY, SALARY
from emp_record_table
where (select min(EXP) FROM emp_record_table where EXP > 10) ;


/*13.	Write a query to create a stored procedure to retrieve the details of the employees whose
experience is more than three years. Take data from the employee record table.*/

DELIMITER //
CREATE PROCEDURE getexperiencedemployees()
select EMP_ID, FIRST_NAME, LAST_NAME, ROLE, DEPT, COUNTRY, SALARY
from emp_record_table
where EXP > 3 ;
// DELIMITER ;

CALL getexperiencedemployees() ;
use employee ;


/*14.	Write a query using stored functions in the project table to check whether the job profile assigned to each employee in the data science team matches the organization’s set standard.

The standard being:
For an employee with experience less than or equal to 2 years assign 'JUNIOR DATA SCIENTIST',
For an employee with the experience of 2 to 5 years assign 'ASSOCIATE DATA SCIENTIST',
For an employee with the experience of 5 to 10 years assign 'SENIOR DATA SCIENTIST',
For an employee with the experience of 10 to 12 years assign 'LEAD DATA SCIENTIST',
*/

DELIMITER //
CREATE FUNCTION GetJobProfile(EXP INT) RETURNS VARCHAR(50)
DETERMINISTIC
BEGIN
    DECLARE job_profile VARCHAR(50);
    IF EXP <= 2 THEN
        SET job_profile = 'JUNIOR DATA SCIENTIST';
    ELSEIF EXP > 2 AND EXP <= 5 THEN
        SET job_profile = 'ASSOCIATE DATA SCIENTIST';
    ELSEIF EXP > 5 AND EXP <= 10 THEN
        SET job_profile = 'SENIOR DATA SCIENTIST';
    ELSEIF EXP > 10 AND EXP <= 12 THEN
        SET job_profile = 'LEAD DATA SCIENTIST';
        ELSEIF EXP > 12 AND EXP <= 16 THEN
        SET job_profile = 'MANAGER';
    ELSE
        SET job_profile = 'UNKNOWN';
    END IF;
    RETURN job_profile;
END //
DELIMITER ;


SELECT 
    d.EMP_ID, 
    d.FIRST_NAME, 
    d.LAST_NAME, 
    d.ROLE AS 'Assigned_Job_Profile', 
    GetJobProfile(d.EXP) AS 'Standard_Job_Profile',
    CASE 
        WHEN d.ROLE = GetJobProfile(d.EXP) THEN 'MATCH'
        ELSE 'MISMATCH'
    END AS PROFILE_STATUS
FROM 
    data_science_team d
LIMIT 1000;


/*15.	Create an index to improve the cost and performance of the query to find the employee whose 
FIRST_NAME is ‘Eric’ in the employee table after checking the execution plan.*/

CREATE INDEX idx_first_name ON data_science_team (FIRST_NAME(255));
SHOW INDEX FROM data_science_team ;
EXPLAIN SELECT * FROM data_science_team WHERE FIRST_NAME = 'Eric';


/*16.	Write a query to calculate the bonus for all the employees, based on their ratings and salaries (Use the formula: 5% of salary * employee rating).
*/

DESCRIBE emp_record_table;
SELECT * FROM emp_record_table LIMIT 10;
SELECT 
    EMP_ID,
    SALARY,
    EMP_RATING,
    (0.05 * SALARY * EMP_RATING) AS bonus
FROM 
    emp_record_table;


/*17.	Write a query to calculate the average salary distribution based on the continent and country. Take data from the employee record table.*/

SELECT 
    continent, country,
    AVG(salary) AS average_salary
FROM 
    emp_record_table
GROUP BY 
    continent, 
    country
ORDER BY 
    continent, 
    country;
